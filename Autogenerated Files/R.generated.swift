//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `PrivacyPolicy.rtf`.
    static let privacyPolicyRtf = Rswift.FileResource(bundle: R.hostingBundle, name: "PrivacyPolicy", pathExtension: "rtf")
    /// Resource file `UserAgreement.rtf`.
    static let userAgreementRtf = Rswift.FileResource(bundle: R.hostingBundle, name: "UserAgreement", pathExtension: "rtf")
    
    /// `bundle.url(forResource: "PrivacyPolicy", withExtension: "rtf")`
    static func privacyPolicyRtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.privacyPolicyRtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "UserAgreement", withExtension: "rtf")`
    static func userAgreementRtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.userAgreementRtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 0 images.
  struct image {
    /// This `R.image.common` struct is generated, and contains static references to 7 images.
    struct common {
      /// Image `back`.
      static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "Common/back")
      /// Image `background`.
      static let background = Rswift.ImageResource(bundle: R.hostingBundle, name: "Common/background")
      /// Image `checkbox_off`.
      static let checkbox_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "Common/checkbox_off")
      /// Image `checkbox_on`.
      static let checkbox_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "Common/checkbox_on")
      /// Image `close`.
      static let close = Rswift.ImageResource(bundle: R.hostingBundle, name: "Common/close")
      /// Image `logo`.
      static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Common/logo")
      /// Image `play`.
      static let play = Rswift.ImageResource(bundle: R.hostingBundle, name: "Common/play")
      
      /// `UIImage(named: "back", bundle: ..., traitCollection: ...)`
      static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.common.back, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "background", bundle: ..., traitCollection: ...)`
      static func background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.common.background, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "checkbox_off", bundle: ..., traitCollection: ...)`
      static func checkbox_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.common.checkbox_off, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "checkbox_on", bundle: ..., traitCollection: ...)`
      static func checkbox_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.common.checkbox_on, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "close", bundle: ..., traitCollection: ...)`
      static func close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.common.close, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
      static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.common.logo, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "play", bundle: ..., traitCollection: ...)`
      static func play(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.common.play, compatibleWith: traitCollection)
      }
      
      fileprivate init() {}
    }
    
    /// This `R.image.entrance` struct is generated, and contains static references to 2 images.
    struct entrance {
      /// Image `lock`.
      static let lock = Rswift.ImageResource(bundle: R.hostingBundle, name: "Entrance/lock")
      /// Image `mail`.
      static let mail = Rswift.ImageResource(bundle: R.hostingBundle, name: "Entrance/mail")
      
      /// `UIImage(named: "lock", bundle: ..., traitCollection: ...)`
      static func lock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.entrance.lock, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "mail", bundle: ..., traitCollection: ...)`
      static func mail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.entrance.mail, compatibleWith: traitCollection)
      }
      
      fileprivate init() {}
    }
    
    /// This `R.image.mainTabbar` struct is generated, and contains static references to 10 images.
    struct mainTabbar {
      /// Image `motivation_selected`.
      static let motivation_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "MainTabbar/motivation_selected")
      /// Image `motivation`.
      static let motivation = Rswift.ImageResource(bundle: R.hostingBundle, name: "MainTabbar/motivation")
      /// Image `nutrition_selected`.
      static let nutrition_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "MainTabbar/nutrition_selected")
      /// Image `nutrition`.
      static let nutrition = Rswift.ImageResource(bundle: R.hostingBundle, name: "MainTabbar/nutrition")
      /// Image `planner_selected`.
      static let planner_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "MainTabbar/planner_selected")
      /// Image `planner`.
      static let planner = Rswift.ImageResource(bundle: R.hostingBundle, name: "MainTabbar/planner")
      /// Image `profile_selected`.
      static let profile_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "MainTabbar/profile_selected")
      /// Image `profile`.
      static let profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "MainTabbar/profile")
      /// Image `workouts_selected`.
      static let workouts_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "MainTabbar/workouts_selected")
      /// Image `workouts`.
      static let workouts = Rswift.ImageResource(bundle: R.hostingBundle, name: "MainTabbar/workouts")
      
      /// `UIImage(named: "motivation", bundle: ..., traitCollection: ...)`
      static func motivation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.mainTabbar.motivation, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "motivation_selected", bundle: ..., traitCollection: ...)`
      static func motivation_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.mainTabbar.motivation_selected, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "nutrition", bundle: ..., traitCollection: ...)`
      static func nutrition(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.mainTabbar.nutrition, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "nutrition_selected", bundle: ..., traitCollection: ...)`
      static func nutrition_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.mainTabbar.nutrition_selected, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "planner", bundle: ..., traitCollection: ...)`
      static func planner(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.mainTabbar.planner, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "planner_selected", bundle: ..., traitCollection: ...)`
      static func planner_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.mainTabbar.planner_selected, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "profile", bundle: ..., traitCollection: ...)`
      static func profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.mainTabbar.profile, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "profile_selected", bundle: ..., traitCollection: ...)`
      static func profile_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.mainTabbar.profile_selected, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "workouts", bundle: ..., traitCollection: ...)`
      static func workouts(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.mainTabbar.workouts, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "workouts_selected", bundle: ..., traitCollection: ...)`
      static func workouts_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.mainTabbar.workouts_selected, compatibleWith: traitCollection)
      }
      
      fileprivate init() {}
    }
    
    /// This `R.image.planner` struct is generated, and contains static references to 4 images.
    struct planner {
      /// Image `checkmark`.
      static let checkmark = Rswift.ImageResource(bundle: R.hostingBundle, name: "Planner/checkmark")
      /// Image `delete_action`.
      static let delete_action = Rswift.ImageResource(bundle: R.hostingBundle, name: "Planner/delete_action")
      /// Image `edit_action`.
      static let edit_action = Rswift.ImageResource(bundle: R.hostingBundle, name: "Planner/edit_action")
      /// Image `plus`.
      static let plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "Planner/plus")
      
      /// `UIImage(named: "checkmark", bundle: ..., traitCollection: ...)`
      static func checkmark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.planner.checkmark, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "delete_action", bundle: ..., traitCollection: ...)`
      static func delete_action(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.planner.delete_action, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "edit_action", bundle: ..., traitCollection: ...)`
      static func edit_action(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.planner.edit_action, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "plus", bundle: ..., traitCollection: ...)`
      static func plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.planner.plus, compatibleWith: traitCollection)
      }
      
      fileprivate init() {}
    }
    
    /// This `R.image.player` struct is generated, and contains static references to 7 images.
    struct player {
      /// Image `collapse`.
      static let collapse = Rswift.ImageResource(bundle: R.hostingBundle, name: "Player/collapse")
      /// Image `expand`.
      static let expand = Rswift.ImageResource(bundle: R.hostingBundle, name: "Player/expand")
      /// Image `pause`.
      static let pause = Rswift.ImageResource(bundle: R.hostingBundle, name: "Player/pause")
      /// Image `play`.
      static let play = Rswift.ImageResource(bundle: R.hostingBundle, name: "Player/play")
      /// Image `progress`.
      static let progress = Rswift.ImageResource(bundle: R.hostingBundle, name: "Player/progress")
      /// Image `thumb`.
      static let thumb = Rswift.ImageResource(bundle: R.hostingBundle, name: "Player/thumb")
      /// Image `track`.
      static let track = Rswift.ImageResource(bundle: R.hostingBundle, name: "Player/track")
      
      /// `UIImage(named: "collapse", bundle: ..., traitCollection: ...)`
      static func collapse(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.player.collapse, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "expand", bundle: ..., traitCollection: ...)`
      static func expand(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.player.expand, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "pause", bundle: ..., traitCollection: ...)`
      static func pause(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.player.pause, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "play", bundle: ..., traitCollection: ...)`
      static func play(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.player.play, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "progress", bundle: ..., traitCollection: ...)`
      static func progress(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.player.progress, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "thumb", bundle: ..., traitCollection: ...)`
      static func thumb(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.player.thumb, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "track", bundle: ..., traitCollection: ...)`
      static func track(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.player.track, compatibleWith: traitCollection)
      }
      
      fileprivate init() {}
    }
    
    /// This `R.image.profile` struct is generated, and contains static references to 4 images.
    struct profile {
      /// Image `avatar`.
      static let avatar = Rswift.ImageResource(bundle: R.hostingBundle, name: "Profile/avatar")
      /// Image `logout`.
      static let logout = Rswift.ImageResource(bundle: R.hostingBundle, name: "Profile/logout")
      /// Image `plus`.
      static let plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "Profile/plus")
      /// Image `settings`.
      static let settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "Profile/settings")
      
      /// `UIImage(named: "avatar", bundle: ..., traitCollection: ...)`
      static func avatar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.profile.avatar, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "logout", bundle: ..., traitCollection: ...)`
      static func logout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.profile.logout, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "plus", bundle: ..., traitCollection: ...)`
      static func plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.profile.plus, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "settings", bundle: ..., traitCollection: ...)`
      static func settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.profile.settings, compatibleWith: traitCollection)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 8 nibs.
  struct nib {
    /// Nib `LoadingView`.
    static let loadingView = _R.nib._LoadingView()
    /// Nib `MotivationCell`.
    static let motivationCell = _R.nib._MotivationCell()
    /// Nib `MotivationGroupHeaderView`.
    static let motivationGroupHeaderView = _R.nib._MotivationGroupHeaderView()
    /// Nib `PlannerItemCell`.
    static let plannerItemCell = _R.nib._PlannerItemCell()
    /// Nib `PlayerView`.
    static let playerView = _R.nib._PlayerView()
    /// Nib `VideoViewStyle1`.
    static let videoViewStyle1 = _R.nib._VideoViewStyle1()
    /// Nib `VideoViewStyle2`.
    static let videoViewStyle2 = _R.nib._VideoViewStyle2()
    /// Nib `VideoViewStyle3`.
    static let videoViewStyle3 = _R.nib._VideoViewStyle3()
    
    /// `UINib(name: "LoadingView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.loadingView) instead")
    static func loadingView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.loadingView)
    }
    
    /// `UINib(name: "MotivationCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.motivationCell) instead")
    static func motivationCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.motivationCell)
    }
    
    /// `UINib(name: "MotivationGroupHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.motivationGroupHeaderView) instead")
    static func motivationGroupHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.motivationGroupHeaderView)
    }
    
    /// `UINib(name: "PlannerItemCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.plannerItemCell) instead")
    static func plannerItemCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.plannerItemCell)
    }
    
    /// `UINib(name: "PlayerView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.playerView) instead")
    static func playerView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.playerView)
    }
    
    /// `UINib(name: "VideoViewStyle1", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.videoViewStyle1) instead")
    static func videoViewStyle1(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.videoViewStyle1)
    }
    
    /// `UINib(name: "VideoViewStyle2", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.videoViewStyle2) instead")
    static func videoViewStyle2(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.videoViewStyle2)
    }
    
    /// `UINib(name: "VideoViewStyle3", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.videoViewStyle3) instead")
    static func videoViewStyle3(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.videoViewStyle3)
    }
    
    static func loadingView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.loadingView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func motivationCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MotivationCell? {
      return R.nib.motivationCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MotivationCell
    }
    
    static func motivationGroupHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MotivationGroupHeaderView? {
      return R.nib.motivationGroupHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MotivationGroupHeaderView
    }
    
    static func plannerItemCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PlannerItemCell? {
      return R.nib.plannerItemCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PlannerItemCell
    }
    
    static func playerView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PlayerView? {
      return R.nib.playerView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PlayerView
    }
    
    static func videoViewStyle1(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.videoViewStyle1.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func videoViewStyle2(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.videoViewStyle2.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func videoViewStyle3(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.videoViewStyle3.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 3 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `MotivationCell`.
    static let motivationCell: Rswift.ReuseIdentifier<MotivationCell> = Rswift.ReuseIdentifier(identifier: "MotivationCell")
    /// Reuse identifier `MotivationGroupHeaderView`.
    static let motivationGroupHeaderView: Rswift.ReuseIdentifier<MotivationGroupHeaderView> = Rswift.ReuseIdentifier(identifier: "MotivationGroupHeaderView")
    /// Reuse identifier `PlannerItemCell`.
    static let plannerItemCell: Rswift.ReuseIdentifier<PlannerItemCell> = Rswift.ReuseIdentifier(identifier: "PlannerItemCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 11 storyboards.
  struct storyboard {
    /// Storyboard `Authorization`.
    static let authorization = _R.storyboard.authorization()
    /// Storyboard `DocumentViewer`.
    static let documentViewer = _R.storyboard.documentViewer()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Motivation`.
    static let motivation = _R.storyboard.motivation()
    /// Storyboard `Nutrition`.
    static let nutrition = _R.storyboard.nutrition()
    /// Storyboard `PasswordRecovery`.
    static let passwordRecovery = _R.storyboard.passwordRecovery()
    /// Storyboard `Planner`.
    static let planner = _R.storyboard.planner()
    /// Storyboard `Profile`.
    static let profile = _R.storyboard.profile()
    /// Storyboard `Registration`.
    static let registration = _R.storyboard.registration()
    /// Storyboard `TaskGroupDetails`.
    static let taskGroupDetails = _R.storyboard.taskGroupDetails()
    /// Storyboard `Workouts`.
    static let workouts = _R.storyboard.workouts()
    
    /// `UIStoryboard(name: "Authorization", bundle: ...)`
    static func authorization(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.authorization)
    }
    
    /// `UIStoryboard(name: "DocumentViewer", bundle: ...)`
    static func documentViewer(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.documentViewer)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Motivation", bundle: ...)`
    static func motivation(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.motivation)
    }
    
    /// `UIStoryboard(name: "Nutrition", bundle: ...)`
    static func nutrition(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.nutrition)
    }
    
    /// `UIStoryboard(name: "PasswordRecovery", bundle: ...)`
    static func passwordRecovery(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.passwordRecovery)
    }
    
    /// `UIStoryboard(name: "Planner", bundle: ...)`
    static func planner(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.planner)
    }
    
    /// `UIStoryboard(name: "Profile", bundle: ...)`
    static func profile(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.profile)
    }
    
    /// `UIStoryboard(name: "Registration", bundle: ...)`
    static func registration(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.registration)
    }
    
    /// `UIStoryboard(name: "TaskGroupDetails", bundle: ...)`
    static func taskGroupDetails(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.taskGroupDetails)
    }
    
    /// `UIStoryboard(name: "Workouts", bundle: ...)`
    static func workouts(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.workouts)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 95 localization keys.
    struct localizable {
      /// Value: E-Mail
      static let auth_screen_email_placeholder = Rswift.StringResource(key: "auth_screen_email_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: E-Mail
      static let password_recovery_email_placeholder = Rswift.StringResource(key: "password_recovery_email_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: E-Mail
      static let register_screen_email_placeholder = Rswift.StringResource(key: "register_screen_email_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Next
      static let main_tabbar_workouts = Rswift.StringResource(key: "main_tabbar_workouts", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: OK
      static let alert_button_ok = Rswift.StringResource(key: "alert_button_ok", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: ВХОД В АККАУНТ
      static let auth_screen_title = Rswift.StringResource(key: "auth_screen_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Введите привязанный к аккаунту E-mail и получи по почте новый пароль для входа
      static let password_recovery_subtitle = Rswift.StringResource(key: "password_recovery_subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Войти
      static let auth_screen_login = Rswift.StringResource(key: "auth_screen_login", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Войти
      static let register_screen_auth = Rswift.StringResource(key: "register_screen_auth", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Вспомнили пароль? Войти
      static let password_recovery_auth_full = Rswift.StringResource(key: "password_recovery_auth_full", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Вы действительно хотите удалить задачу?
      static let taskgroup_screen_delete_task_message = Rswift.StringResource(key: "taskgroup_screen_delete_task_message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Вы действительно хотите удалить цель?
      static let planner_screen_delete_taskgroup_message = Rswift.StringResource(key: "planner_screen_delete_taskgroup_message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Выбрать фото из библиотеки
      static let profile_screen_photo_source_library = Rswift.StringResource(key: "profile_screen_photo_source_library", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Выполнен запрос с неверным набором параметров.
      static let error_message_invalid_parameters = Rswift.StringResource(key: "error_message_invalid_parameters", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Выполнен запрос с некорректным токеном.
      static let error_message_invalid_token = Rswift.StringResource(key: "error_message_invalid_token", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Выслать новый пароль
      static let password_recovery_auth = Rswift.StringResource(key: "password_recovery_auth", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Да
      static let alert_button_yes = Rswift.StringResource(key: "alert_button_yes", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Есть аккаунт? Войти
      static let register_screen_auth_full = Rswift.StringResource(key: "register_screen_auth_full", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Забыли пароль?
      static let auth_screen_password_recovery = Rswift.StringResource(key: "auth_screen_password_recovery", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Забыли пароль?
      static let password_recovery_title = Rswift.StringResource(key: "password_recovery_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Загрузка задач
      static let taskgroup_screen_loading = Rswift.StringResource(key: "taskgroup_screen_loading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Загрузка контента
      static let motivation_screen_loading = Rswift.StringResource(key: "motivation_screen_loading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Загрузка профиля
      static let profile_screen_loading = Rswift.StringResource(key: "profile_screen_loading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Загрузка целей
      static let planner_screen_loading = Rswift.StringResource(key: "planner_screen_loading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Зарегистрироваться
      static let auth_screen_registration = Rswift.StringResource(key: "auth_screen_registration", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Зарегистрироваться
      static let register_screen_registration = Rswift.StringResource(key: "register_screen_registration", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Изменить
      static let planner_screen_edit = Rswift.StringResource(key: "planner_screen_edit", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Изменить
      static let taskgroup_screen_edit = Rswift.StringResource(key: "taskgroup_screen_edit", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Нажимая «Войти», Вы соглашаетесь с пользовательским соглашением и политикой конфиденциальности.
      static let auth_screen_conditions_full = Rswift.StringResource(key: "auth_screen_conditions_full", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Нажимая кнопку регистрации вы принимаете условия Пользовательского соглашения
      static let register_screen_conditions_full = Rswift.StringResource(key: "register_screen_conditions_full", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Не удалось выполнить запрос, отсутствует токен.
      static let error_message_request_failed_no_token = Rswift.StringResource(key: "error_message_request_failed_no_token", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Не удалось выполнить запрос.
      static let error_message_request_failed = Rswift.StringResource(key: "error_message_request_failed", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Не удалось сформировать запрос к серверу.
      static let error_message_cannot_build_request = Rswift.StringResource(key: "error_message_cannot_build_request", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Не удалось установить безопасное соединение с сервером.
      static let error_message_server_insecure_connection = Rswift.StringResource(key: "error_message_server_insecure_connection", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Неверная длина данных.
      static let error_message_wrong_data_length = Rswift.StringResource(key: "error_message_wrong_data_length", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Неверный логин или пароль.
      static let error_message_bad_credentials = Rswift.StringResource(key: "error_message_bad_credentials", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Неверный формат данных.
      static let error_message_wrong_data_format = Rswift.StringResource(key: "error_message_wrong_data_format", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Нет
      static let alert_button_nope = Rswift.StringResource(key: "alert_button_nope", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Нет аккаунта? Зарегистрироваться.
      static let auth_screen_registration_full = Rswift.StringResource(key: "auth_screen_registration_full", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Новая задача
      static let taskgroup_screen_new_task = Rswift.StringResource(key: "taskgroup_screen_new_task", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Новый список
      static let planner_screen_new_taskgroup = Rswift.StringResource(key: "planner_screen_new_taskgroup", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Отмена
      static let profile_screen_photo_source_cancel = Rswift.StringResource(key: "profile_screen_photo_source_cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Отменить
      static let alert_button_cancel = Rswift.StringResource(key: "alert_button_cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Отсутствует соединение с интернетом.
      static let error_message_no_internet = Rswift.StringResource(key: "error_message_no_internet", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Ошибка
      static let alert_title_error = Rswift.StringResource(key: "alert_title_error", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Пароль
      static let auth_screen_password_placeholder = Rswift.StringResource(key: "auth_screen_password_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Пароль
      static let register_screen_password_placeholder = Rswift.StringResource(key: "register_screen_password_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Питание
      static let main_tabbar_nutrition = Rswift.StringResource(key: "main_tabbar_nutrition", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Питание
      static let nutrition_screen_title = Rswift.StringResource(key: "nutrition_screen_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Повторить
      static let alert_button_retry = Rswift.StringResource(key: "alert_button_retry", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Повторить
      static let motivation_screen_retry_loading = Rswift.StringResource(key: "motivation_screen_retry_loading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Повторить
      static let planner_screen_retry_loading = Rswift.StringResource(key: "planner_screen_retry_loading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Повторить
      static let player_retry = Rswift.StringResource(key: "player_retry", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Повторить
      static let profile_screen_retry_loading = Rswift.StringResource(key: "profile_screen_retry_loading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Повторить
      static let taskgroup_screen_retry_loading = Rswift.StringResource(key: "taskgroup_screen_retry_loading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Поле «E-Mail» должно содержать от 6-ти до 64-х символов.
      static let error_message_wrong_email_length = Rswift.StringResource(key: "error_message_wrong_email_length", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Поле «E-Mail» имеет неверный формат.
      static let error_message_wrong_email_format = Rswift.StringResource(key: "error_message_wrong_email_format", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Поле «Пароль» должно содержать от 6-ти до 20-ти символов.
      static let error_message_wrong_password_length = Rswift.StringResource(key: "error_message_wrong_password_length", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Поле «Пароль» содержит недопустимые символы.
      static let error_message_wrong_password_format = Rswift.StringResource(key: "error_message_wrong_password_format", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Политика конфиденциальности
      static let document_title_privacy_policy = Rswift.StringResource(key: "document_title_privacy_policy", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Получен некорректный ответ сервера.
      static let error_message_response_mapping_error = Rswift.StringResource(key: "error_message_response_mapping_error", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Пользовательского соглашения
      static let register_screen_conditions_user_agreement = Rswift.StringResource(key: "register_screen_conditions_user_agreement", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Пользовательское соглашение
      static let document_title_user_agreement = Rswift.StringResource(key: "document_title_user_agreement", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Превышено максимальное количество задач.
      static let taskgroup_screen_limit_reached_message = Rswift.StringResource(key: "taskgroup_screen_limit_reached_message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Превышено максимальное количество целей.
      static let planner_screen_limit_reached_message = Rswift.StringResource(key: "planner_screen_limit_reached_message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Произошла неизвестная внутренняя ошибка сервера.
      static let error_message_internal_server_error = Rswift.StringResource(key: "error_message_internal_server_error", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Произошла неизвестная внутренняя ошибка.
      static let error_message_unknown_internal_error = Rswift.StringResource(key: "error_message_unknown_internal_error", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Произошла неизвестная ошибка валидации данных.
      static let error_message_unknown_validation_error = Rswift.StringResource(key: "error_message_unknown_validation_error", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Произошла неизвестная ошибка.
      static let error_message_unknown = Rswift.StringResource(key: "error_message_unknown", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Произошла ошибка при воспроизведении контента. Попробуйте повторить позже.
      static let player_error = Rswift.StringResource(key: "player_error", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Произошла ошибка при загрузке контента. Попробуйте повторить позже.
      static let motivation_screen_loading_error = Rswift.StringResource(key: "motivation_screen_loading_error", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Произошла ошибка при загрузке контента. Попробуйте повторить позже.
      static let planner_screen_loading_error = Rswift.StringResource(key: "planner_screen_loading_error", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Произошла ошибка при загрузке контента. Попробуйте повторить позже.
      static let taskgroup_screen_loading_error = Rswift.StringResource(key: "taskgroup_screen_loading_error", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Произошла ошибка при загрузке профиля. Попробуйте повторить позже.
      static let profile_screen_loading_error = Rswift.StringResource(key: "profile_screen_loading_error", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Профиль
      static let main_tabbar_profile = Rswift.StringResource(key: "main_tabbar_profile", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Профиль
      static let profile_screen_title = Rswift.StringResource(key: "profile_screen_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: РЕГИСТРАЦИЯ
      static let register_screen_title = Rswift.StringResource(key: "register_screen_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Разум
      static let main_tabbar_motivation = Rswift.StringResource(key: "main_tabbar_motivation", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Разум
      static let motivation_screen_title = Rswift.StringResource(key: "motivation_screen_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Сервер вернул ошибку с неизвестным кодом %d.
      static let error_message_unknown_server_error = Rswift.StringResource(key: "error_message_unknown_server_error", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Сервер недоступен.
      static let error_message_server_unavailable = Rswift.StringResource(key: "error_message_server_unavailable", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Сообщение
      static let alert_title_message = Rswift.StringResource(key: "alert_title_message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Срок действия токена истек.
      static let error_message_token_expired = Rswift.StringResource(key: "error_message_token_expired", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Сфотографировать камерой
      static let profile_screen_photo_source_camera = Rswift.StringResource(key: "profile_screen_photo_source_camera", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Тренировки
      static let workouts_screen_title = Rswift.StringResource(key: "workouts_screen_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Удалить
      static let planner_screen_delete = Rswift.StringResource(key: "planner_screen_delete", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Удалить
      static let taskgroup_screen_delete = Rswift.StringResource(key: "taskgroup_screen_delete", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Указанный аккаунт не зарегистрирован в системе.
      static let error_message_user_not_found = Rswift.StringResource(key: "error_message_user_not_found", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Указанный аккаунт уже зарегистрирован в системе.
      static let error_message_user_already_exists = Rswift.StringResource(key: "error_message_user_already_exists", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Фотографии
      static let profile_screen_photos = Rswift.StringResource(key: "profile_screen_photos", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Цели
      static let main_tabbar_planner = Rswift.StringResource(key: "main_tabbar_planner", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Цели
      static let planner_screen_title = Rswift.StringResource(key: "planner_screen_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: ещё
      static let more_string = Rswift.StringResource(key: "more_string", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: политикой конфиденциальности
      static let auth_screen_conditions_privacy_policy = Rswift.StringResource(key: "auth_screen_conditions_privacy_policy", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: пользовательским соглашением
      static let auth_screen_conditions_user_agreement = Rswift.StringResource(key: "auth_screen_conditions_user_agreement", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: E-Mail
      static func auth_screen_email_placeholder(_: Void = ()) -> String {
        return NSLocalizedString("auth_screen_email_placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: E-Mail
      static func password_recovery_email_placeholder(_: Void = ()) -> String {
        return NSLocalizedString("password_recovery_email_placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: E-Mail
      static func register_screen_email_placeholder(_: Void = ()) -> String {
        return NSLocalizedString("register_screen_email_placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Next
      static func main_tabbar_workouts(_: Void = ()) -> String {
        return NSLocalizedString("main_tabbar_workouts", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: OK
      static func alert_button_ok(_: Void = ()) -> String {
        return NSLocalizedString("alert_button_ok", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: ВХОД В АККАУНТ
      static func auth_screen_title(_: Void = ()) -> String {
        return NSLocalizedString("auth_screen_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Введите привязанный к аккаунту E-mail и получи по почте новый пароль для входа
      static func password_recovery_subtitle(_: Void = ()) -> String {
        return NSLocalizedString("password_recovery_subtitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Войти
      static func auth_screen_login(_: Void = ()) -> String {
        return NSLocalizedString("auth_screen_login", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Войти
      static func register_screen_auth(_: Void = ()) -> String {
        return NSLocalizedString("register_screen_auth", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Вспомнили пароль? Войти
      static func password_recovery_auth_full(_: Void = ()) -> String {
        return NSLocalizedString("password_recovery_auth_full", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Вы действительно хотите удалить задачу?
      static func taskgroup_screen_delete_task_message(_: Void = ()) -> String {
        return NSLocalizedString("taskgroup_screen_delete_task_message", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Вы действительно хотите удалить цель?
      static func planner_screen_delete_taskgroup_message(_: Void = ()) -> String {
        return NSLocalizedString("planner_screen_delete_taskgroup_message", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Выбрать фото из библиотеки
      static func profile_screen_photo_source_library(_: Void = ()) -> String {
        return NSLocalizedString("profile_screen_photo_source_library", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Выполнен запрос с неверным набором параметров.
      static func error_message_invalid_parameters(_: Void = ()) -> String {
        return NSLocalizedString("error_message_invalid_parameters", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Выполнен запрос с некорректным токеном.
      static func error_message_invalid_token(_: Void = ()) -> String {
        return NSLocalizedString("error_message_invalid_token", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Выслать новый пароль
      static func password_recovery_auth(_: Void = ()) -> String {
        return NSLocalizedString("password_recovery_auth", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Да
      static func alert_button_yes(_: Void = ()) -> String {
        return NSLocalizedString("alert_button_yes", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Есть аккаунт? Войти
      static func register_screen_auth_full(_: Void = ()) -> String {
        return NSLocalizedString("register_screen_auth_full", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Забыли пароль?
      static func auth_screen_password_recovery(_: Void = ()) -> String {
        return NSLocalizedString("auth_screen_password_recovery", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Забыли пароль?
      static func password_recovery_title(_: Void = ()) -> String {
        return NSLocalizedString("password_recovery_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Загрузка задач
      static func taskgroup_screen_loading(_: Void = ()) -> String {
        return NSLocalizedString("taskgroup_screen_loading", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Загрузка контента
      static func motivation_screen_loading(_: Void = ()) -> String {
        return NSLocalizedString("motivation_screen_loading", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Загрузка профиля
      static func profile_screen_loading(_: Void = ()) -> String {
        return NSLocalizedString("profile_screen_loading", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Загрузка целей
      static func planner_screen_loading(_: Void = ()) -> String {
        return NSLocalizedString("planner_screen_loading", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Зарегистрироваться
      static func auth_screen_registration(_: Void = ()) -> String {
        return NSLocalizedString("auth_screen_registration", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Зарегистрироваться
      static func register_screen_registration(_: Void = ()) -> String {
        return NSLocalizedString("register_screen_registration", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Изменить
      static func planner_screen_edit(_: Void = ()) -> String {
        return NSLocalizedString("planner_screen_edit", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Изменить
      static func taskgroup_screen_edit(_: Void = ()) -> String {
        return NSLocalizedString("taskgroup_screen_edit", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Нажимая «Войти», Вы соглашаетесь с пользовательским соглашением и политикой конфиденциальности.
      static func auth_screen_conditions_full(_: Void = ()) -> String {
        return NSLocalizedString("auth_screen_conditions_full", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Нажимая кнопку регистрации вы принимаете условия Пользовательского соглашения
      static func register_screen_conditions_full(_: Void = ()) -> String {
        return NSLocalizedString("register_screen_conditions_full", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Не удалось выполнить запрос, отсутствует токен.
      static func error_message_request_failed_no_token(_: Void = ()) -> String {
        return NSLocalizedString("error_message_request_failed_no_token", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Не удалось выполнить запрос.
      static func error_message_request_failed(_: Void = ()) -> String {
        return NSLocalizedString("error_message_request_failed", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Не удалось сформировать запрос к серверу.
      static func error_message_cannot_build_request(_: Void = ()) -> String {
        return NSLocalizedString("error_message_cannot_build_request", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Не удалось установить безопасное соединение с сервером.
      static func error_message_server_insecure_connection(_: Void = ()) -> String {
        return NSLocalizedString("error_message_server_insecure_connection", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Неверная длина данных.
      static func error_message_wrong_data_length(_: Void = ()) -> String {
        return NSLocalizedString("error_message_wrong_data_length", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Неверный логин или пароль.
      static func error_message_bad_credentials(_: Void = ()) -> String {
        return NSLocalizedString("error_message_bad_credentials", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Неверный формат данных.
      static func error_message_wrong_data_format(_: Void = ()) -> String {
        return NSLocalizedString("error_message_wrong_data_format", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Нет
      static func alert_button_nope(_: Void = ()) -> String {
        return NSLocalizedString("alert_button_nope", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Нет аккаунта? Зарегистрироваться.
      static func auth_screen_registration_full(_: Void = ()) -> String {
        return NSLocalizedString("auth_screen_registration_full", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Новая задача
      static func taskgroup_screen_new_task(_: Void = ()) -> String {
        return NSLocalizedString("taskgroup_screen_new_task", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Новый список
      static func planner_screen_new_taskgroup(_: Void = ()) -> String {
        return NSLocalizedString("planner_screen_new_taskgroup", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Отмена
      static func profile_screen_photo_source_cancel(_: Void = ()) -> String {
        return NSLocalizedString("profile_screen_photo_source_cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Отменить
      static func alert_button_cancel(_: Void = ()) -> String {
        return NSLocalizedString("alert_button_cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Отсутствует соединение с интернетом.
      static func error_message_no_internet(_: Void = ()) -> String {
        return NSLocalizedString("error_message_no_internet", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Ошибка
      static func alert_title_error(_: Void = ()) -> String {
        return NSLocalizedString("alert_title_error", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Пароль
      static func auth_screen_password_placeholder(_: Void = ()) -> String {
        return NSLocalizedString("auth_screen_password_placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Пароль
      static func register_screen_password_placeholder(_: Void = ()) -> String {
        return NSLocalizedString("register_screen_password_placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Питание
      static func main_tabbar_nutrition(_: Void = ()) -> String {
        return NSLocalizedString("main_tabbar_nutrition", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Питание
      static func nutrition_screen_title(_: Void = ()) -> String {
        return NSLocalizedString("nutrition_screen_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Повторить
      static func alert_button_retry(_: Void = ()) -> String {
        return NSLocalizedString("alert_button_retry", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Повторить
      static func motivation_screen_retry_loading(_: Void = ()) -> String {
        return NSLocalizedString("motivation_screen_retry_loading", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Повторить
      static func planner_screen_retry_loading(_: Void = ()) -> String {
        return NSLocalizedString("planner_screen_retry_loading", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Повторить
      static func player_retry(_: Void = ()) -> String {
        return NSLocalizedString("player_retry", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Повторить
      static func profile_screen_retry_loading(_: Void = ()) -> String {
        return NSLocalizedString("profile_screen_retry_loading", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Повторить
      static func taskgroup_screen_retry_loading(_: Void = ()) -> String {
        return NSLocalizedString("taskgroup_screen_retry_loading", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Поле «E-Mail» должно содержать от 6-ти до 64-х символов.
      static func error_message_wrong_email_length(_: Void = ()) -> String {
        return NSLocalizedString("error_message_wrong_email_length", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Поле «E-Mail» имеет неверный формат.
      static func error_message_wrong_email_format(_: Void = ()) -> String {
        return NSLocalizedString("error_message_wrong_email_format", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Поле «Пароль» должно содержать от 6-ти до 20-ти символов.
      static func error_message_wrong_password_length(_: Void = ()) -> String {
        return NSLocalizedString("error_message_wrong_password_length", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Поле «Пароль» содержит недопустимые символы.
      static func error_message_wrong_password_format(_: Void = ()) -> String {
        return NSLocalizedString("error_message_wrong_password_format", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Политика конфиденциальности
      static func document_title_privacy_policy(_: Void = ()) -> String {
        return NSLocalizedString("document_title_privacy_policy", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Получен некорректный ответ сервера.
      static func error_message_response_mapping_error(_: Void = ()) -> String {
        return NSLocalizedString("error_message_response_mapping_error", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Пользовательского соглашения
      static func register_screen_conditions_user_agreement(_: Void = ()) -> String {
        return NSLocalizedString("register_screen_conditions_user_agreement", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Пользовательское соглашение
      static func document_title_user_agreement(_: Void = ()) -> String {
        return NSLocalizedString("document_title_user_agreement", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Превышено максимальное количество задач.
      static func taskgroup_screen_limit_reached_message(_: Void = ()) -> String {
        return NSLocalizedString("taskgroup_screen_limit_reached_message", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Превышено максимальное количество целей.
      static func planner_screen_limit_reached_message(_: Void = ()) -> String {
        return NSLocalizedString("planner_screen_limit_reached_message", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Произошла неизвестная внутренняя ошибка сервера.
      static func error_message_internal_server_error(_: Void = ()) -> String {
        return NSLocalizedString("error_message_internal_server_error", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Произошла неизвестная внутренняя ошибка.
      static func error_message_unknown_internal_error(_: Void = ()) -> String {
        return NSLocalizedString("error_message_unknown_internal_error", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Произошла неизвестная ошибка валидации данных.
      static func error_message_unknown_validation_error(_: Void = ()) -> String {
        return NSLocalizedString("error_message_unknown_validation_error", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Произошла неизвестная ошибка.
      static func error_message_unknown(_: Void = ()) -> String {
        return NSLocalizedString("error_message_unknown", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Произошла ошибка при воспроизведении контента. Попробуйте повторить позже.
      static func player_error(_: Void = ()) -> String {
        return NSLocalizedString("player_error", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Произошла ошибка при загрузке контента. Попробуйте повторить позже.
      static func motivation_screen_loading_error(_: Void = ()) -> String {
        return NSLocalizedString("motivation_screen_loading_error", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Произошла ошибка при загрузке контента. Попробуйте повторить позже.
      static func planner_screen_loading_error(_: Void = ()) -> String {
        return NSLocalizedString("planner_screen_loading_error", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Произошла ошибка при загрузке контента. Попробуйте повторить позже.
      static func taskgroup_screen_loading_error(_: Void = ()) -> String {
        return NSLocalizedString("taskgroup_screen_loading_error", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Произошла ошибка при загрузке профиля. Попробуйте повторить позже.
      static func profile_screen_loading_error(_: Void = ()) -> String {
        return NSLocalizedString("profile_screen_loading_error", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Профиль
      static func main_tabbar_profile(_: Void = ()) -> String {
        return NSLocalizedString("main_tabbar_profile", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Профиль
      static func profile_screen_title(_: Void = ()) -> String {
        return NSLocalizedString("profile_screen_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: РЕГИСТРАЦИЯ
      static func register_screen_title(_: Void = ()) -> String {
        return NSLocalizedString("register_screen_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Разум
      static func main_tabbar_motivation(_: Void = ()) -> String {
        return NSLocalizedString("main_tabbar_motivation", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Разум
      static func motivation_screen_title(_: Void = ()) -> String {
        return NSLocalizedString("motivation_screen_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Сервер вернул ошибку с неизвестным кодом %d.
      static func error_message_unknown_server_error(_ value1: Int) -> String {
        return String(format: NSLocalizedString("error_message_unknown_server_error", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: Сервер недоступен.
      static func error_message_server_unavailable(_: Void = ()) -> String {
        return NSLocalizedString("error_message_server_unavailable", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Сообщение
      static func alert_title_message(_: Void = ()) -> String {
        return NSLocalizedString("alert_title_message", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Срок действия токена истек.
      static func error_message_token_expired(_: Void = ()) -> String {
        return NSLocalizedString("error_message_token_expired", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Сфотографировать камерой
      static func profile_screen_photo_source_camera(_: Void = ()) -> String {
        return NSLocalizedString("profile_screen_photo_source_camera", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Тренировки
      static func workouts_screen_title(_: Void = ()) -> String {
        return NSLocalizedString("workouts_screen_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Удалить
      static func planner_screen_delete(_: Void = ()) -> String {
        return NSLocalizedString("planner_screen_delete", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Удалить
      static func taskgroup_screen_delete(_: Void = ()) -> String {
        return NSLocalizedString("taskgroup_screen_delete", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Указанный аккаунт не зарегистрирован в системе.
      static func error_message_user_not_found(_: Void = ()) -> String {
        return NSLocalizedString("error_message_user_not_found", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Указанный аккаунт уже зарегистрирован в системе.
      static func error_message_user_already_exists(_: Void = ()) -> String {
        return NSLocalizedString("error_message_user_already_exists", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Фотографии
      static func profile_screen_photos(_: Void = ()) -> String {
        return NSLocalizedString("profile_screen_photos", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Цели
      static func main_tabbar_planner(_: Void = ()) -> String {
        return NSLocalizedString("main_tabbar_planner", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Цели
      static func planner_screen_title(_: Void = ()) -> String {
        return NSLocalizedString("planner_screen_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: ещё
      static func more_string(_: Void = ()) -> String {
        return NSLocalizedString("more_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: политикой конфиденциальности
      static func auth_screen_conditions_privacy_policy(_: Void = ()) -> String {
        return NSLocalizedString("auth_screen_conditions_privacy_policy", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: пользовательским соглашением
      static func auth_screen_conditions_user_agreement(_: Void = ()) -> String {
        return NSLocalizedString("auth_screen_conditions_user_agreement", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _PlayerView.validate()
      try _VideoViewStyle1.validate()
      try _VideoViewStyle2.validate()
      try _VideoViewStyle3.validate()
    }
    
    struct _LoadingView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "LoadingView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _MotivationCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MotivationCell
      
      let bundle = R.hostingBundle
      let identifier = "MotivationCell"
      let name = "MotivationCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MotivationCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MotivationCell
      }
      
      fileprivate init() {}
    }
    
    struct _MotivationGroupHeaderView: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MotivationGroupHeaderView
      
      let bundle = R.hostingBundle
      let identifier = "MotivationGroupHeaderView"
      let name = "MotivationGroupHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MotivationGroupHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MotivationGroupHeaderView
      }
      
      fileprivate init() {}
    }
    
    struct _PlannerItemCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PlannerItemCell
      
      let bundle = R.hostingBundle
      let identifier = "PlannerItemCell"
      let name = "PlannerItemCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PlannerItemCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PlannerItemCell
      }
      
      fileprivate init() {}
    }
    
    struct _PlayerView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PlayerView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PlayerView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PlayerView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Player/collapse", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Player/collapse' is used in nib 'PlayerView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Player/expand", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Player/expand' is used in nib 'PlayerView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Player/pause", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Player/pause' is used in nib 'PlayerView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Player/play", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Player/play' is used in nib 'PlayerView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _VideoViewStyle1: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "VideoViewStyle1"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Common/play", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Common/play' is used in nib 'VideoViewStyle1', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _VideoViewStyle2: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "VideoViewStyle2"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Common/play", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Common/play' is used in nib 'VideoViewStyle2', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _VideoViewStyle3: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "VideoViewStyle3"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Common/play", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Common/play' is used in nib 'VideoViewStyle3', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try authorization.validate()
      try documentViewer.validate()
      try launchScreen.validate()
      try motivation.validate()
      try nutrition.validate()
      try passwordRecovery.validate()
      try planner.validate()
      try profile.validate()
      try registration.validate()
      try taskGroupDetails.validate()
      try workouts.validate()
    }
    
    struct authorization: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = AuthorizationViewController
      
      let bundle = R.hostingBundle
      let initial = StoryboardViewControllerResource<AuthorizationViewController>(identifier: "Initial")
      let name = "Authorization"
      
      func initial(_: Void = ()) -> AuthorizationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: initial)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Common/background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Common/background' is used in storyboard 'Authorization', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Common/logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Common/logo' is used in storyboard 'Authorization', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.authorization().initial() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'initial' could not be loaded from storyboard 'Authorization' as 'AuthorizationViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct documentViewer: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let initial = StoryboardViewControllerResource<DocumentViewerViewController>(identifier: "Initial")
      let name = "DocumentViewer"
      
      func initial(_: Void = ()) -> DocumentViewerViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: initial)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.documentViewer().initial() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'initial' could not be loaded from storyboard 'DocumentViewer' as 'DocumentViewerViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "Common/background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Common/background' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Common/logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Common/logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct motivation: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MotivationViewController
      
      let bundle = R.hostingBundle
      let initial = StoryboardViewControllerResource<MotivationViewController>(identifier: "Initial")
      let name = "Motivation"
      
      func initial(_: Void = ()) -> MotivationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: initial)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.motivation().initial() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'initial' could not be loaded from storyboard 'Motivation' as 'MotivationViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct nutrition: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = NutritionViewController
      
      let bundle = R.hostingBundle
      let initial = StoryboardViewControllerResource<NutritionViewController>(identifier: "Initial")
      let name = "Nutrition"
      
      func initial(_: Void = ()) -> NutritionViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: initial)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.nutrition().initial() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'initial' could not be loaded from storyboard 'Nutrition' as 'NutritionViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct passwordRecovery: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = PasswordRecoveryViewController
      
      let bundle = R.hostingBundle
      let initial = StoryboardViewControllerResource<PasswordRecoveryViewController>(identifier: "Initial")
      let name = "PasswordRecovery"
      
      func initial(_: Void = ()) -> PasswordRecoveryViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: initial)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Common/background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Common/background' is used in storyboard 'PasswordRecovery', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Common/logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Common/logo' is used in storyboard 'PasswordRecovery', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.passwordRecovery().initial() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'initial' could not be loaded from storyboard 'PasswordRecovery' as 'PasswordRecoveryViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct planner: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = PlannerViewController
      
      let bundle = R.hostingBundle
      let initial = StoryboardViewControllerResource<PlannerViewController>(identifier: "Initial")
      let name = "Planner"
      
      func initial(_: Void = ()) -> PlannerViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: initial)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.planner().initial() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'initial' could not be loaded from storyboard 'Planner' as 'PlannerViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct profile: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ProfileViewController
      
      let bundle = R.hostingBundle
      let initial = StoryboardViewControllerResource<ProfileViewController>(identifier: "Initial")
      let name = "Profile"
      
      func initial(_: Void = ()) -> ProfileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: initial)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Profile/avatar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Profile/avatar' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Profile/settings", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Profile/settings' is used in storyboard 'Profile', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.profile().initial() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'initial' could not be loaded from storyboard 'Profile' as 'ProfileViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct registration: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = RegistrationViewController
      
      let bundle = R.hostingBundle
      let initial = StoryboardViewControllerResource<RegistrationViewController>(identifier: "Initial")
      let name = "Registration"
      
      func initial(_: Void = ()) -> RegistrationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: initial)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Common/background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Common/background' is used in storyboard 'Registration', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Common/logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Common/logo' is used in storyboard 'Registration', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.registration().initial() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'initial' could not be loaded from storyboard 'Registration' as 'RegistrationViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct taskGroupDetails: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = TaskGroupDetailsViewController
      
      let bundle = R.hostingBundle
      let initial = StoryboardViewControllerResource<TaskGroupDetailsViewController>(identifier: "Initial")
      let name = "TaskGroupDetails"
      
      func initial(_: Void = ()) -> TaskGroupDetailsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: initial)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.taskGroupDetails().initial() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'initial' could not be loaded from storyboard 'TaskGroupDetails' as 'TaskGroupDetailsViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct workouts: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = WorkoutsViewController
      
      let bundle = R.hostingBundle
      let initial = StoryboardViewControllerResource<WorkoutsViewController>(identifier: "Initial")
      let name = "Workouts"
      
      func initial(_: Void = ()) -> WorkoutsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: initial)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.workouts().initial() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'initial' could not be loaded from storyboard 'Workouts' as 'WorkoutsViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
